import os
import glob

def count_elements_in_file(filepath):
    """Reads a file and counts the number of space-separated elements."""
    try:
        with open(filepath, 'r') as f:
            content = f.read()
        # Handle empty files gracefully
        if not content.strip():
            return 0
        return len(content.strip().split())
    except FileNotFoundError:
        return 0

def analyze_scenario(scenario_path, elements_per_packet):
    """Analyzes all data and truth files in a given scenario path."""
    analysis_lines = []
    analysis_lines.append(f"\n--- Analyzing Scenario: {os.path.basename(scenario_path)} ---")
    analysis_lines.append("=" * 40)

    data_files = sorted(glob.glob(os.path.join(scenario_path, 'data', '**', 'csi_*.txt'), recursive=True))
    truth_files = sorted(glob.glob(os.path.join(scenario_path, 'truth', '**', '*_truth.txt'), recursive=True))

    analysis_lines.append("\n[CSI Data Files Analysis]")
    for f in data_files:
        elements = count_elements_in_file(f)
        packets = elements // elements_per_packet if elements_per_packet else 0
        analysis_lines.append(f"File: {f}")
        analysis_lines.append(f"  - Total Elements: {elements:,}")
        analysis_lines.append(f"  - Calculated Packets: {packets:,} (at {elements_per_packet} elements/packet)")

    analysis_lines.append("\n[Truth Files Analysis]")
    truth_file_map = {}
    for f in truth_files:
        elements = count_elements_in_file(f)
        base_name = os.path.basename(f).replace('_truth.txt', '')
        if base_name not in truth_file_map:
            truth_file_map[base_name] = elements
        
    for base_name, elements in sorted(truth_file_map.items()):
        analysis_lines.append(f"Experiment: {base_name}")
        analysis_lines.append(f"  - Total Labels: {elements}")
    
    analysis_lines.append("\n[Packets per Label Calculation (Examples)]")
    for base_name, num_labels in sorted(truth_file_map.items()):
        if num_labels == 0:
            continue
            
        room_a_file = next((f for f in data_files if base_name in f and 'room_A' in f), None)
        room_b_file = next((f for f in data_files if base_name in f and 'room_B' in f), None)

        if room_a_file and room_b_file:
            elements_a = count_elements_in_file(room_a_file)
            packets_a = elements_a // elements_per_packet
            
            elements_b = count_elements_in_file(room_b_file)
            packets_b = elements_b // elements_per_packet

            min_packets = min(packets_a, packets_b)
            
            if num_labels > 0:
                packets_per_label = min_packets / num_labels
                analysis_lines.append(f"Experiment: {base_name}")
                analysis_lines.append(f"  - Min Packets (between Room A & B): {min_packets:,}")
                analysis_lines.append(f"  - Total Labels: {num_labels}")
                analysis_lines.append(f"  - Average CSI packets per Truth Label: {packets_per_label:.2f}")

    return "\n".join(analysis_lines)

def main():
    """Main function to run the analysis."""
    base_path = 'datasets'
    scenario1_path = os.path.join(base_path, 'home_scenario_1')
    scenario2_path = os.path.join(base_path, 'home_scenario_2')

    full_report = "This report was generated by src/analyze_dataset.py\n"

    if os.path.exists(scenario1_path):
        full_report += analyze_scenario(scenario1_path, elements_per_packet=1008)
    else:
        print(f"Path not found: {scenario1_path}")

    full_report += "\n"

    if os.path.exists(scenario2_path):
        full_report += analyze_scenario(scenario2_path, elements_per_packet=1000)
    else:
        print(f"Path not found: {scenario2_path}")
    
    print(full_report)

if __name__ == "__main__":
    main() 